/* Many state lotteries use a variation of the simple lottery portrayed by Listing 7.4.In
these variations you choose several numbers from one set and call them the field
numbers.For example, you might select five numbers from the field of 1–47).You
also pick a single number(called a mega number or a power ball, etc.) from a second
range, such as 1–27.To win the grand prize, you have to guess all the picks correctly.
The chance of winning is the product of the probability of picking all the
field numbers times the probability of picking the mega number.For instance, the
probability of winning the example described here is the product of the probability
of picking 5 out of 47 correctly times the probability of picking 1 out of 27 correctly.
Modify Listing 7.4 to calculate the probability of winning this kind of lottery.*/

#include "stdafx.h"
#include <iostream>
// Note: some implementations require double instead of long double
long double probability(unsigned numbers1, unsigned picks1, unsigned numbers2, unsigned picks2);
int main()
{
	using namespace std;
	double total1, choices1, total2, choices2;
	cout << "Enter the 1st time of total number of choices and\n"
		"the number of picks allowed ***********************\n"
		"Enter the 2nd time of total number of choices and\n"
		"the number of picks allowed:\n";
	while ((cin >> total1 >> choices1>> total2 >> choices2) && choices1 <= total1 && choices1 <= total2)
	{
		cout << "You have one chance in ";
		cout << probability(total1, choices1,total2, choices2); // compute the odds
		cout << " of winning.\n";
		cout << "Next four numbers (q to quit): ";//the real probablity should be 1/result
	}
	cout << "bye\n";
	return 0;
}
// the following function calculates the probability of picking picks
// numbers correctly from numbers choices
long double probability(unsigned numbers1, unsigned picks1, unsigned numbers2, unsigned picks2)
{
	long double result = 1.0; // here come some local variables
	unsigned n1, n2 ;
	unsigned p1,p2;
	for (n1= numbers1, p1 = picks1, n2= numbers2, p2 = picks2; p1 > 0,p2 > 0; n1--, p1--, n2--, p2--)
		result = result * (n1 / p1)*(n2 / p2);
	return result;
}
