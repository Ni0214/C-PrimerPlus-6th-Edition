// chapter7 Exercise 9.cpp : This exercise provides practice in writing functions dealing with arrays and structures.
//The following is a program skeleton.Complete it by providing the described
//functions :
//const int SLEN = 30;
//struct student {
//	char fullname[SLEN];
//	char hobby[SLEN];
//	int ooplevel;
//};
//// getinfo() has two arguments: a pointer to the first element of
//// an array of student structures and an int representing the
//// number of elements of the array. The function solicits and
//// stores data about students. It terminates input upon filling
//// the array or upon encountering a blank line for the student
//// name. The function returns the actual number of array elements
//// filled.
//int getinfo(student pa[], int n);
//// display1() takes a student structure as an argument
//// and displays its contents
//void display1(student st);
////display2() takes the address of student structure as an
//// argument and displays the structure’s contents
//void display2(const student * ps);
//// display3() takes the address of the first element of an array
//// of student structures and the number of array elements as
//// arguments and displays the contents of the structures
//void display3(const student pa[], int n);
//int main()
//{
//	cout << “Enter class size : “;
//	int class_size;
//	cin >> class_size;
//	while (cin.get() != '\n’)
//		continue;
//	student * ptr_stu = new student[class_size];
//	int entered = getinfo(ptr_stu, class_size);
//	for (int i = 0; i < entered; i++)
//	{
//		display1(ptr_stu[i]);
//		display2(&ptr_stu[i]);
//	}
//	display3(ptr_stu, entered);
//	delete[] ptr_stu;
//	cout << “Done\n”;
//	return 0;
//}

　
　
　
　
#include "stdafx.h"
#include <iostream>
using namespace std;

const int SLEN = 30;
struct student {
	char fullname[SLEN];
	char hobby[SLEN];
	int ooplevel;
};
/**********************************************************************/
//getinfo() has two arguments: a pointer to the first element of
// an array of student structures and an int representing the
// number of elements of the array. The function solicits and
// stores data about students. It terminates input upon filling
// the array or upon encountering a blank line for the student
// name. The function returns the actual number of array elements
// filled.
/****************************************************************************/
int getinfo(student pa[], int n)
{
	int i=0;
	
	
		for (i = 0;i < n;i++)
		{
			
			
				cout << i + 1 << "): Enter the student Name,Hobby,and Mark: " << endl;
				cin >> pa[i].fullname;
				if (cin.get() !=' ') //check weather the single charter contains 'blank space ' or not
				{
					cin >> pa[i].hobby;
					cin >> pa[i].ooplevel;
				}
				else
				{
					cout << "Input name is valid, terminate the input here"<<endl;
					break;
					
				}

			
		}
	

	return i;
}

　
/**********************************************************************/
// display1() takes a student structure as an argument
// and displays its contents
/**********************************************************************/
void display1(student st)
{
	cout << "The student: " << st.fullname << ",		Hobby is: " << st.hobby << ",		Mark is: " << st.ooplevel << endl;
}

/**********************************************************************/
//display2() takes the address of student structure as an
// argument and displays the structure’s contents
/**********************************************************************/
void display2(const student *ps)
{
	cout << "The student: " << ps->fullname<< ",		Hobby is: " << ps->hobby << ",		Mark is: " << ps->ooplevel << endl;
	
}

/**********************************************************************/
// display3() takes the address of the first element of an array
// of student structures and the number of array elements as
// arguments and displays the contents of the structures
/**********************************************************************/
void display3(const student pa[], int n)
{
	int i = 0;
	for (i = 0; i < n;i++)
	{
		cout << "The student: " << pa[i].fullname << ",		Hobby is: " << pa[i].hobby << ",		Mark is: " << pa[i].ooplevel << endl;
	}
}

int main()
{
	cout << "Enter class size : ";
	int class_size;
	cin >> class_size;
	while (cin.get() != '\n')
		continue;
	student * ptr_stu = new student[class_size];
	int entered = getinfo(ptr_stu, class_size);

	for (int i = 0; i < entered; i++)
	{
		display1(ptr_stu[i]);
		display2(&ptr_stu[i]);
	}
	display3(ptr_stu, entered);
	delete[] ptr_stu;
	cout << "Done\n";
	return 0;
}
