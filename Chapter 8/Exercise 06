//// chapter8exercise06.cpp : Write a template function maxn() that takes as its arguments an array of items of
//type T and an integer representing the number of elements in the array and that
//returns the largest item in the array.Test it in a program that uses the function template
//with an array of six int value and an array of four double values.The program
//should also include a specialization that takes an array of pointers - to - char as
//an argument and the number of pointers as a second argument and that returns the
//address of the longest string.If multiple strings are tied for having the longest
//length, the function should return the address of the first one tied for longest.Test
//the specialization with an array of five string pointers.
////


#include "stdafx.h"
#include <iostream>
#include<string>

using namespace std;

template <typename T>
T maxn(T x[], int n);

//overload template and specialize
template <>
char * maxn(char * arr[], int size);


int main()

{
//input integer
	int y[6];
	cout << "Please enter 6 integer numbers:";
	for (int i = 0;i < 6;i++)
	{
		cin >> y[i];
	}
	cout << "The max value is :" << maxn(y,6) << endl << endl;


//input double
	double z[4];
	cout << "Please enter 4 double numbers:";
	for (int i = 0;i < 4;i++)
	{
		cin >> z[i];
	}
	cout << "The max value is :" << maxn(z,4) << endl<<endl;

	cin.ignore();   // to decard '/n', so that not affect later use cin.getline function
	cin.clear();    // to decard '/n', so that not affect later use cin.getline function

//input strings
	char s[3][30];
	char *sptr[3];//define pointer
	
	cout << "Please enter 3 strings :";
	for (int i = 0;i < 3;i++)
	{
		cin.getline(s[i],30);
		sptr[i] = &s[i][0];	
	}
	cout << "The longest string is :" << maxn(sptr, 3) << endl;

	return 0;

}



template <typename T>
T maxn(T x[],int n)
{
	T temp = x[0];
	for (int i = 1;i < n;i++)
	{
		if (x[i] >= temp)
			temp = x[i];
	}
	return temp;
}

template <>
char * maxn(char * arr[], int size)
{
	char *longest = arr[0];
	
	for (int i = 0; i < size; i++)
	{
		if (strlen(arr[i]) >=strlen(longest))
		longest = arr[i];
	}
	return longest;
}
