//// chapter8exercise07.cpp : Modify Listing 8.14 so that it uses two template functions called SumArray() to
//return the sum of the array contents instead of displaying the contents.The program
//now should report the total number of things and the sum of all the debts
////

#include "stdafx.h"
#include <iostream>

template <typename T> // template A
void SumArray(T arr[], int n);

template <typename T> // template B
void SumArray(T * arr[], int n);

struct debts
{
	char name[50];
	double amount;
};
int main()
{
	using namespace std;
	int things[6] = { 13, 31, 103, 301, 310, 130 };
	struct debts mr_E[3] =
	{
		{ "Ima Wolfe", 2400.0 },
		{ "Ura Foxe", 1300.0 },
		{ "Iby Stout", 1800.0 }
	};
	double * pd[3];
	// set pointers to the amount members of the structures in mr_E
	for (int i = 0; i < 3; i++)
		pd[i] = &mr_E[i].amount;
	cout << "the total sum of  Mr. E's counts of things is :\n";
	// things is an array of int
	SumArray(things, 6); // uses template A

	cout << "the total sum of Mr. E's debts is:\n";
	// pd is an array of pointers to double
	SumArray(pd, 3); // uses template B (more specialized)
	return 0;
}
template <typename T>
void SumArray(T arr[], int n)
{
	using namespace std;
	T sum1=arr[0];
	cout << "template A\n";
	for (int i = 1; i < n; i++)
		sum1+= arr[i] ;
	cout <<sum1<< endl;
}
template <typename T>
void SumArray(T * arr[], int n)
{
	using namespace std;
	T sum2 = *arr[0];
	cout << "template B\n";
	for (int i = 1; i < n; i++)
		sum2+= *arr[i] ;
	cout <<sum2<<endl;
}
